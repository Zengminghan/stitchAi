def get_best_response(self, message):
    with concurrent.futures.ThreadPoolExecutor() as executor:
        futures = {executor.submit(assistant.chatMessage, message): name for name, assistant in self.assistants.items()}
        responses = {}
        for future in concurrent.futures.as_completed(futures):
            name = futures[future]
            try:
                response = future.result()
            except Exception as exc:
                print(f'{name} generated an exception: {exc}')
                response = None
            responses[name] = response
        
        # 选择最佳回答的逻辑
        best_response = max(responses.items(), key=lambda item: (len(item[1]) if item[1] else 0, item[0]))[1]
        
        # 如果需要，可以在这里添加更多的逻辑来评估回答的质量
        if best_response and len(best_response) < 100:  # 假设我们希望回答至少有100个字符
            best_response += " 这是为了增加回答的长度而添加的额外内容。"
        
        return best_response if best_response else "对不起，我无法回答您的问题。"